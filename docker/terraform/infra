#!/bin/bash


function usage {
  echo -n \
    "Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands.
"
}

set -e

if [[ -n "${GFW_AWS_CORE_INFRASTRUCTURE_DEBUG}" ]]; then
  set -x
fi

if [ -z "${ENV}" ]; then
  ENV=dev
  AWS_PROFILE=gfw-dev
else
  AWS_PROFILE=gfw-${ENV}
fi

export AWS_PROFILE
echo "Using enviroment ${ENV} and AWS_PROFILE ${AWS_PROFILE}"

## select or create the current workspace
#./docker/terraform/workspace

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
  if [ "${1:-}" = "--help" ]; then
    usage
  else
    TERRAFORM_DIR="$(dirname "$0")/../../terraform"

    pushd "${TERRAFORM_DIR}"

    case "${1}" in
    fmt)
      terraform fmt -recursive .
      ;;
    plan)
      # Clear stale modules, then re-initialize
      rm -rf .terraform
      # select or create the current workspace
      terraform init \
        -backend-config=vars/backend-${ENV}.tfvars
      ../docker/terraform/workspace
      terraform plan \
        -var-file="vars/user-aoi-batch-${ENV}.tfvars" \
        -out="user-aoi-batch.tfplan"
      ;;
    apply)
      terraform apply \
        "user-aoi-batch.tfplan"
      ;;
    destroy)
      terraform destroy \
        -var-file="vars/user-aoi-batch-${ENV}.tfvars" \
        -auto-approve
      ;;
    *)
      echo "ERROR: I don't have support for that Terraform subcommand!"
      exit 1
      ;;
    esac

    popd
  fi
fi
